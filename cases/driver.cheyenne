#!/bin/bash
#PBS -j oe
#PBS -k oed

source my.env
echo "Running" > $TESTPATH/my.status

function logmsg {
    if [[ -n $RUN ]]; then
        echo -e "$(date +%FT%T) | ($RUN) $1" >> $LOGFILE
    else
        echo -e "$(date +%FT%T) | $1" >> $LOGFILE
    fi
}

function classify_run {
    sed -i "/$$/d" $TESTPATH/rpids.active
    echo $$ >> $TESTPATH/rpids.done
    
    if [[ $exit_code -eq 0 ]]; then
        echo "$RUN $HOSTLIST" >> $TESTPATH/pass
    else
        echo "$RUN $HOSTLIST" >> $TESTPATH/fail
    fi
}

export -f logmsg classify_run

logmsg "Using $CASENAME node test"
logmsg "Starting tests..."
logmsg "Initializing environment...\n"

# Set up case environment
ulimit -c unlimited
ulimit -s unlimited
ulimit -a >> $LOGFILE
echo >> $LOGFILE

# System-specific settings
module purge
module reset

# Get shuffled list of unique nodes
HEADNODE=$(head -n1 $PBS_NODEFILE)
readarray -t NODES <<< "$(uniq $PBS_NODEFILE | tail -n +2 | shuf --random-source=<(./seedfunc))"
NODES+=( $HEADNODE )
NUMNODES=${#NODES[@]}

# Create and run cases
cd runs
echo "Launching" > $TESTPATH/my.status
RN=1 NNODES=1

function start_run {
    export RUN=R$RN
    cd $RUN

    # Run case
    logmsg "Launching run with nodes ${HOSTLIST}..."
    $TESTPATH/launch &
    MYPID=$!
    echo $MYPID >> $TESTPATH/rpids.active

    if [[ $RN -eq 1 ]]; then
        FJPID=$MYPID
    fi

    cd ../
    unset RUN
}

while [[ $RN -le $NUMRUNS ]]; do
    sleep 0.05

    if [[ $N == $NUMNODES ]]; then
        N=0
    fi

    # Open MPI hangs if head node is not listed first in hostlist
    export HOSTLIST=${HOSTLIST},${NODES[$N]%%.*}
    MPINODE=$(eval echo $HOSTFMT)

    if [[ ${NODES[$N]} == $HEADNODE ]]; then
        # Need to wait for other runs to finish before final run to
        # avoid overhead penalty on head node
        logmsg "Waiting before submitting test run on head node..."
        
        while [[ $(wc -l < $TESTPATH/rpids.active 2> /dev/null) -gt 0 ]]; do
            sleep 1
        done

        export MPIHOSTS=${MPINODE},${MPIHOSTS}
    else
        export MPIHOSTS=${MPIHOSTS},${MPINODE}
    fi

    if [[ $NNODES -eq $NPR ]]; then
        HOSTLIST=$(sed -E -e 's/^,|,$//g' -e 's/,,/,/g' <<< $HOSTLIST)
        MPIHOSTS=$(sed -E -e 's/^,|,$//g' -e 's/,,/,/g' <<< $MPIHOSTS)
        start_run
        ((RN++)); NNODES=0 HOSTLIST= MPIHOSTS=
    fi
    
    ((N++)); ((NNODES++))
done

logmsg "Waiting for final run to finish..."
echo "Polling" > $TESTPATH/my.status

# Wait until all runs have completed
wait

logmsg "Tests completed!"
echo "Finished" > $TESTPATH/my.status
