#!/bin/bash

# Before beginning, sleep a little to help GLADE
sleep $[($RANDOM % 30) + 1]s

# Run WRF (make sure it doesn't run forever - 5 min max)
timeout 5m $MPICMD $HOSTLIST $RUNARGS ./wrf.exe >& wrf.log   # launch the executable

# ----- CHECK FOR SUCCESSFUL EXECUTION ----- #

exit_code=$?

if [ $exit_code -ne 0 ]; then
    if [ $exit_code -eq 124 ]; then
        logmsg "TIMEOUT ERROR - $HOSTLIST"
    else
        logmsg "EXECUTION ERROR - $HOSTLIST"
    fi
else
    # Run stats script and store output in array
    IFS=' ' read -r -a stats <<< $(./wrf_stats -t -d .)

    # Check for successful integration
    if [ ${stats[2]} -ne $expected_time_steps ]; then
        logmsg "NUM STEPS ERROR (${stats[2]}!=$expected_time_steps) - $HOSTLIST"
        exit_code=-1
    fi

    # Check for output consistency
    file=wrfout_d01_2001-10-25_03:00:00
    diff $file expected_$file > /dev/null 2>&1

    if [ $? -ne 0 ]; then
        logmsg "OUTPUT ERROR (${file}) - $HOSTLIST"
        exit_code=-1
    fi

    # Check for runtime conditions
    rcc=$(grep -io error rsl.* | wc -l)

    if [ $rcc -gt 0 ]; then
        logmsg "RUNTIME CONDITION (${rcc}) - $HOSTLIST"
        exit_code=-1
    fi

    # Check CPU and I/O speed
    if (( $(bc <<< "${stats[1]} > $max_cpu_time") )); then
        logmsg "CPU/STEP EXCEEDED (${stats[1]}>${max_cpu_time}s) - $HOSTLIST"
        exit_code=-1
    fi

    if (( $(bc <<< "${stats[5]} > $max_io_time") )); then
        logmsg "IO/STEP EXCEEDED (${stats[5]}>${max_io_time}s) - $HOSTLIST"
        exit_code=-1
    fi

    echo ${stats[1]} >> $TESTPATH/cpu.dat
    echo ${stats[5]} >> $TESTPATH/io.dat
fi

classify_run
