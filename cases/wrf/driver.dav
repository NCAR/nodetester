#!/bin/bash -l

#SBATCH -J NT-WRF-DAV
#SBATCH -t 60

echo "Running" > jobstat
source job.env

cat >> $LOGFILE << EOF
$(date +%FT%T) | Using WRF pairwise node test
$(date +%FT%T) | Starting tests...
$(date +%FT%T) | Initializing environment...

EOF

# Set up case environment
export OMP_NUM_THREADS=1
ulimit -a >> $LOGFILE
echo >> $LOGFILE

# System-specific settings
module purge
module reset

# These settings must be integers
export max_cpu_time=130  # 115 s expected, but not complaining until 130 s
export max_io_time=20    # 5-15 s typical, but not complaining until 20 s

# Get shuffled list of unique nodes
readarray -t NODES <<< "$(scontrol show hostname $(squeue -j $SLURM_JOB_ID -o %N -h) | shuf --random-source=<(./seedfunc))"
NUMNODES=${#NODES[@]}

# Create and run cases
cd runs
export RUN=1

function run_wrf {
    cd R$RUN
    export NODEPAIR=${1%%.*}-${2%%.*}
    export NODELIST="-w ${1},${2}"

    # Store pairing for reference
    echo "R$RUN $NODEPAIR" >> ${TESTPATH}/run-node-map

    # Run case
    echo "$(date +%FT%T) | Launching run with nodes ${NODEPAIR}..." >> $LOGFILE
    ${TESTPATH}/run_case > result &

    # Get PID of first run
    if [[ $RUN == 1 ]]; then
        FJPID=$!
    fi

    cd ../
}

for N in $(seq 0 2 $((NUMNODES-2))); do
    sleep 0.1
    run_wrf ${NODES[$N]} ${NODES[$((N+1))]}
    ((RUN++))
done

# Add last-node run if total number of nodes is odd
if [[ $LEFTOVER -gt 0 ]]; then
    wait $FJPID
    run_wrf ${NODES[0]} ${NODES[-1]}
fi

echo "$(date +%FT%T) | All runs have begun..." >> $LOGFILE
wait
echo "$(date +%FT%T) | Tests completed!" >> $LOGFILE

echo "Finished" > ../jobstat
