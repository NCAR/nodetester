#!/bin/bash

# Before beginning, sleep a little to help GLADE
sleep $[($RANDOM % 30) + 1]s

# The following MUST all be integers
expected_time_steps=149  # 149 time steps
max_cpu_time=60          # 40s expected, rounding up to 60s
max_io_time=40           # 5s to 15s typical, not complaining till 40s

# Get node pair and set result file
echo $NODEPAIR >> ../../runs-all
res_file=result

# Create new nodefile
export PBS_NODEFILE=${PWD}/nodefile

# Run WRF
mpiexec_mpt ./wrf.exe >& wrf.log   # launch the executable

# ----- CHECK FOR SUCCESSFUL EXECUTION ----- #

exit_code=$?

if [ $exit_code -ne 0 ]; then
    echo "$(date +%FT%T) | ($NODEPAIR) EXECUTION ERROR" >> $LOGFILE
    FAIL=TRUE
else
    # Run stats script and store output in array
    IFS=' ' read -r -a stats <<< $(./wrf_stats -t -d .)

    # Check for successful integration
    if [ ${stats[2]} -ne $expected_time_steps ]; then
        echo "$(date +%FT%T) | ($NODEPAIR) NUM STEPS ERROR - (${stats[2]} when $expected_time_steps expected)" >> $LOGFILE
        FAIL=TRUE
    fi

    # Check for output consistency
    file=wrfout_d01_2001-10-25_03:00:00
    diff $file expected_$file > /dev/null 2>&1

    if [ $? -ne 0 ]; then
        echo "$(date +%FT%T) | ($NODEPAIR) OUTPUT ERROR - (${file})" >> $LOGFILE
        FAIL=TRUE
    fi

    # Check for runtime conditions
    rcc=$(grep -io error rsl.* | wc -l)

    if [ $rcc -gt 0 ]; then
        echo "$(date +%FT%T) | ($NODEPAIR) RUNTIME CONDITION - (${rcc} errors)" >> $LOGFILE
        FAIL=TRUE
    fi

    # Check CPU and I/O speed
    if (( $(bc <<< "${stats[1]} > $max_cpu_time") )); then
        echo "$(date +%FT%T) | ($NODEPAIR) CPU LIMIT EXCEEDED - (${stats[1]} when max is ${max_cpu_time})" >> $LOGFILE
        FAIL=TRUE
    fi

    if (( $(bc <<< "${stats[5]} > $max_io_time") )); then
        echo "$(date +%FT%T) | ($NODEPAIR) I/O LIMIT EXCEEDED - (${stats[5]} when max is ${max_io_time})" >> $LOGFILE
        FAIL=TRUE
    fi

    echo ${stats[1]} >> ../../cpu.dat
    echo ${stats[5]} >> ../../io.dat
fi

# ----- REPORT RESULTS

if [[ $FAIL == TRUE ]]; then
    echo $NODEPAIR >> ../../runs-fail
else
    echo $NODEPAIR >> ../../runs-pass
fi
