#!/bin/bash
#
# ===== PBS NODETESTER
#
#   This script runs a bunch of tests on nodes using a supplied
#   test case. Currently only supports pairwise tests.
#
#	Maintainer: Brian Vanderwende
#	Revised:    09:07, 06 Sep 2018

# ===== PARSE ARGUMENTS

function usage {
cat << EOF
Usage: nodetester [options] CASE 

This script will submit and monitor a selected node test using
the specified job scheduler. Currently only pairwise tests are
supported.

Options:
    -a, --account       the account/project code to which jobs are charged
    -f, --force         submit node tests even if requested nodes are not free
    -h, --help          display this help and exit
    -m, --machine       which machine to test (chey or dav)
    -n, --nodes         the number of nodes to test (-1 for all available)
    -o, --options       specify any other scheduler options for the main job
    -p, --path          override the default path for test output
    -q, --queue         the queue on which jobs are run
EOF
exit $1
}

# Set default values
MACHINE=chey
ACCOUNT=SCSG0001
CASE=unknown
NUMNODES=-1
TESTPATH=/glade/scratch/$USER/nodetests
QUEUE=regular

while [[ $# -gt 0 ]]; do
    KEY="$1"

    case $KEY in
        -h|--help)
            usage
            ;;
        -a|--account)
            ACCOUNT="$2"
            shift; ;;
        -f|--force)
            FORCE=TRUE
            ;;
        -m|--machine)
            MACHINE="${2,,}"
            shift; ;;
        -n|--nodes)
            NUMNODES="$2"
            shift; ;;
        -o|--options)
            SCHEDOPTS="$2"
            shift; ;;
        -p|--path)
            TESTPATH="$2"
            shift; ;;
        -q|--queue)
            QUEUE="$2"
            shift; ;;
        *)
            CASE=$KEY
            ;;
    esac

    shift
done

# Make sure that the case exists
if [[ ! -d cases/$CASE ]]; then
    echo -e "Fatal: case $CASE not found; cannot start test\n"
    usage 3
fi

# Make sure that the machine is supported
if [[ ! -f mach_${MACHINE}.cfg ]]; then
    echo -e "Fatal: machine $MACHINE it not supported; cannot start test\n"
    usage 4
else
    source mach_${MACHINE}.cfg
fi

# ===== BEGIN LOGGING

TESTPATH=${TESTPATH}/${CASE}/$(date +%FT%H%M%S)
LOGFILE=${TESTPATH}/main.log
mkdir -p ${TESTPATH}/runs

cat << EOF
===========================
    Starting Nodetester 
===========================

EOF

function logmsg {
    echo "$(date +%FT%T) | $1" | tee -a $LOGFILE
}

logmsg "Initializing new node test..."
logmsg "Using the $SCHEDNAME batch scheduler"

# ===== CHECK AVAILABLE NODE COUNT

# Get available nodes in specified queue
if [[ $FORCE = TRUE ]]; then
    if [[ $NUMNODES -eq -1 ]]; then
        NUMNODES=$(eval "$GETNODESALL")
    fi

    logmsg "Note: skipping free node check (force); long queue wait possible!"
else
    FREENODES=$(eval "$GETNODES")
    
    if [[ $FREENODES -eq 0 ]]; then
        logmsg "Fatal: no free nodes available in $QUEUE queue"
        exit 1
    elif [[ $FREENODES -lt $NUMNODES ]]; then
        logmsg "Warning: requested $NUMNODES nodes but only $FREENODES available in $QUEUE queue"
        NUMNODES=$FREENODES
    elif [[ $NUMNODES -eq -1 ]]; then
        NUMNODES=$FREENODES
    fi
fi

logmsg "Using $NUMNODES nodes in the $QUEUE queue"

NUMRUNS=$((NUMNODES % 2))

if [[ $NUMRUNS -eq 1 ]]; then
    ODDNUM=TRUE
    logmsg "Note: odd number of nodes selected; an extra test will be performed"
fi

# ===== SUBMIT JOB

logmsg "Running case $CASE in $TESTPATH"
cp cases/${CASE}/driver.${MACHINE} cases/${CASE}/run_case ${TESTPATH}

# Clone case directory
logmsg "Creating run directories..."

NUMRUNS=$((NUMNODES / 2 + NUMRUNS))
for N in $(seq 1 $NUMRUNS); do
    cp -Lr cases/${CASE}/case_${MACHINE} ${TESTPATH}/runs/R$N
done

logmsg "Configuring job environment..."

# Store variables for ingest into job environment
cat > ${TESTPATH}/job.env << EOF
export MPICMD="$MPICMD"
export PPN=$PPN
export RUNARGS="$RUNARGS"
export LOGFILE=$LOGFILE
TESTPATH=$TESTPATH
ODDNUM=$ODDNUM
EOF

logmsg "Submitting job with the following settings:"
logmsg "   $JOBSETTINGS $SCHEDOPTS"

cd $TESTPATH
JOBID=$(eval "$SUBCMD -o job.log $JOBSETTINGS $SCHEDOPTS driver.${MACHINE}")
echo -n "Submitted" > jobstat
touch runs-all runs-pass runs-fail
SECONDS=0

# ===== MONITOR RUNS

LOGSIZE=$(($(tput lines) - 19))

function ttylog {
clear
cat << EOF
$(date +%FT%T)

Job ID:             $JOBID
Job Status:         $JOBSTAT
Elapsed Time:       $TELAP
Execution Queue:    $QUEUE
Job Directory:      $TESTPATH

Runs Submitted:     $NUMSUB / $NUMRUNS
Runs Finished:      $((NUMPASS + NUMFAIL)) / $NUMRUNS

Successful:         $NUMPASS
Failed:             $NUMFAIL

====================
Recent log messages:
====================

EOF

tail -n $LOGSIZE $LOGFILE
}

while [[ $JOBSTAT != "Finished" ]]; do
    sleep 5
    JOBSTAT=$(cat jobstat)
    NUMSUB=$(wc -l < runs-all 2> /dev/null)
    NUMPASS=$(wc -l < runs-pass 2> /dev/null)
    NUMFAIL=$(wc -l < runs-fail 2> /dev/null)
    TELAP=$(TZ=UTC0 printf '%(%M min %S sec)T\n' $SECONDS)

    ttylog
done

# ===== OUTPUT FINAL REPORT

if [[ -f ${TESTPATH}/cpu.dat ]]; then
    AVGCPU=$(awk '{x+=$0}END{printf "%.2f s\n", x/NR}' ${TESTPATH}/cpu.dat)
    AVGIO=$(awk '{x+=$0}END{printf "%.2f s\n", x/NR}' ${TESTPATH}/io.dat)
    STDCPU=$(awk '{x+=$0;y+=$0^2}END{printf "%.2f s\n", sqrt(y/NR-(x/NR)^2)}' ${TESTPATH}/cpu.dat)
    STDIO=$(awk '{x+=$0;y+=$0^2}END{printf "%.2f s\n", sqrt(y/NR-(x/NR)^2)}' ${TESTPATH}/io.dat)
else
    AVGCPU=N/A AVGIO=N/A STDCPU=N/A STDIO=N/A
fi

cat >> $LOGFILE << EOF

====================
 Node test summary 
====================

Batch system:       $SCHEDNAME
Job ID:             $JOBID
Execution Queue:    $QUEUE
Elapsed Time:       $TELAP

Number of Runs:     $NUMRUNS
Successful Runs:    $NUMPASS
Failed Runs:        $NUMFAIL

Average CPU Time:   $AVGCPU
Average I/O Time:   $AVGIO

Stddev CPU Time:    $STDCPU
Stddev I/O Time:    $STDIO
EOF

clear
tail -n 19 $LOGFILE

# Print list of nodes with failures to give to admins
if [[ -s ${TESTPATH}/runs-fail ]]; then
    echo
    logmsg "Failures on nodes:"
    logmsg $(paste -s -d ',' ${TESTPATH}/runs-fail | tr '-' ',')
fi

echo -e "\nResults stored in $TESTPATH"
