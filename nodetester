#!/bin/bash
#
# ===== PBS NODETESTER
#
#   This script runs a bunch of tests on nodes using a supplied
#   test case. Currently only supports pairwise tests.
#
#	Maintainer: Brian Vanderwende
#	Revised:    22:40, 29 Aug 2018

# ===== PARSE ARGUMENTS

function usage {
cat << EOF
Usage: nodetester [options] CASE 

This script will submit and monitor a selected node test using
the PBS job scheduler. Currently only pairwise tests are
supported.

Options:
    -a, --account   the account/project code to which jobs are charged
    -f, --force     submit node tests even if requested nodes are not free
    -h, --help      display this help and exit
    -n, --nodes     the number of nodes to test (-1 for all available)
    -p, --path      override the default path for test output
    -q, --queue     the queue on which jobs are run
EOF
exit
}

# Set default values
ACCOUNT=SCSG0001
CASE=unknown
NUMNODES=-1
TESTPATH=/glade/scratch/$USER/nodetests
QUEUE=regular

while [[ $# -gt 0 ]]; do
    KEY="$1"

    case $KEY in
        -h|--help)
            usage
            ;;
        -a|--account)
            ACCOUNT="$2"
            shift; ;;
        -f|--force)
            FORCE=TRUE
            ;;
        -n|--nodes)
            NUMNODES="$2"
            shift; ;;
        -p|--path)
            TESTPATH="$2"
            shift; ;;
        -q|--queue)
            QUEUE="$2"
            shift; ;;
        *)
            CASE=$KEY
            ;;
    esac

    shift
done

# Make sure that the case exists
if [[ ! -d cases/$CASE ]]; then
    echo "Fatal: case $CASE not found; cannot start test"
    exit 3
fi

# ===== BEGIN LOGGING

export TESTPATH=${TESTPATH}/${CASE}/$(date +%FT%H%M%S)
export LOGFILE=${TESTPATH}/main.log
mkdir -p ${TESTPATH}/runs

cat << EOF
===========================
  Starting PBS Nodetester 
===========================

EOF

function logmsg {
    echo "$(date +%FT%T) | $1" | tee -a $LOGFILE
}

logmsg "Initializing new node test..."

# ===== CHECK AVAILABLE NODE COUNT

# Get available nodes in specified queue
if [[ $FORCE = TRUE ]]; then
    if [[ $NUMNODES -eq -1 ]]; then
        NUMNODES=$(pbsnodes -a | grep -wE "Qlist =.*$QUEUE")
    fi

    logmsg "Note: skipping free node check (force); long queue wait possible!"
else
    FREENODES=$(pbsnodes -a | grep -wE "state = free|Qlist =.*$QUEUE" \
                | grep -zoP "state.*\n.*$QUEUE" | grep -c free)

    if [[ $FREENODES -eq 0 ]]; then
        logmsg "Fatal: no free nodes available in $QUEUE queue"
        exit 1
    elif [[ $FREENODES -lt $NUMNODES ]]; then
        logmsg "Warning: requested $NUMNODES nodes but only $FREENODES available in $QUEUE queue"
        NUMNODES=$FREENODES
    elif [[ $NUMNODES -eq -1 ]]; then
        NUMNODES=$FREENODES
    fi
fi

logmsg "Using $NUMNODES nodes in the $QUEUE queue"

NUMRUNS=$((NUMNODES % 2))

if [[ $NUMRUNS -eq 1 ]]; then
    export ODDNUM=TRUE
    logmsg "Note: odd number of nodes selected; an extra test will be performed"
fi

# ===== SUBMIT JOB

logmsg "Running case $CASE in $TESTPATH"
cp cases/${CASE}/driver.pbs cases/${CASE}/run_case ${TESTPATH}

# Clone case directory
logmsg "Creating run directories..."

NUMRUNS=$((NUMNODES / 2 + NUMRUNS))
for N in $(seq 1 $NUMRUNS); do
    cp -Lr cases/${CASE}/run_files ${TESTPATH}/runs/R$N
done

logmsg "Submitting job with the following settings:"
logmsg "   -A $ACCOUNT -q $QUEUE -l select=${NUMNODES}:ncpus=36:mpiprocs=36"

cd $TESTPATH
JOBID=$(qsub -A $ACCOUNT -q $QUEUE -l select=$NUMNODES:ncpus=36:mpiprocs=36 driver.pbs)
echo -n "Submitted" > jobstat
touch runs-all runs-pass runs-fail
SECONDS=0

# ===== MONITOR RUNS

LOGSIZE=$(($(tput lines) - 17))

function ttylog {
clear
cat << EOF
$(date +%FT%T)

PBS Job ID:         $JOBID
Job Status:         $JOBSTAT
Elapsed Time:       $TELAP

Runs Submitted:     $NUMSUB / $NUMRUNS
Runs Finished:      $((NUMPASS + NUMFAIL)) / $NUMRUNS

Successful:         $NUMPASS
Failed:             $NUMFAIL

====================
Recent log messages:
====================

EOF

tail -n $LOGSIZE $LOGFILE
}

while [[ $JOBSTAT != "Finished" ]]; do
    sleep 5
    JOBSTAT=$(cat jobstat)
    NUMSUB=$(wc -l < runs-all 2> /dev/null)
    NUMPASS=$(wc -l < runs-pass 2> /dev/null)
    NUMFAIL=$(wc -l < runs-fail 2> /dev/null)
    TELAP=$(TZ=UTC0 printf '%(%M min %S sec)T\n' $SECONDS)

    ttylog
done

# ===== OUTPUT FINAL REPORT

cat >> $LOGFILE << EOF

====================
 Node test summary 
====================

PBS Job ID:         $JOBID
Elapsed Time:       $TELAP

Number of Runs:     $NUMRUNS
Successful Runs:    $NUMPASS
Failed Runs:        $NUMFAIL

Average CPU Time:   $(awk '{x+=$0}END{printf "%.2f s\n", x/NR}' ${TESTPATH}/cpu.dat)
Average I/O Time:   $(awk '{x+=$0}END{printf "%.2f s\n", x/NR}' ${TESTPATH}/io.dat)

Stddev CPU Time:    $(awk '{x+=$0;y+=$0^2}END{printf "%.2f s\n", sqrt(y/NR-(x/NR)^2)}' ${TESTPATH}/cpu.dat)
Stddev I/O Time:    $(awk '{x+=$0;y+=$0^2}END{printf "%.2f s\n", sqrt(y/NR-(x/NR)^2)}' ${TESTPATH}/io.dat)
EOF

clear
tail -n 16 $LOGFILE
