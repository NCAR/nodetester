#!/bin/bash
#
# ===== PBS NODETESTER
#
#   This script runs a bunch of tests on nodes using a supplied
#   test case.
#
#	Author:    Brian Vanderwende
#	Revised:   17:01, 29 Dec 2021

# ===== ERROR HANDLING

function cleanup {
    if [[ $INIT == LOGGING ]]; then
        logmsg "Quitting before test initialization complete"
    elif [[ $INIT == JOB ]]; then
        logmsg "Cancelling job and quitting..."
        $DELCMD $JOBID
        ttylog
    fi

    exit 5
}

trap cleanup SIGINT SIGTERM

# ===== PARSE ARGUMENTS

function usage {
cat << EOF
Usage: nodetester [options] CASE 

This script will submit and monitor a selected node test using
the specified machine configuration.

Options:
    -a, --account       the account/project code to which jobs are charged
    -f, --force         submit node tests even if requested nodes are not free
    -h, --help          display this help and exit
    -m, --machine       which machine to test (cheyenne or dav)
    -n, --nodes         the number of nodes to test (-1 for all available)
    -o, --options       specify any other scheduler options for the main job
    -p, --path          override the default path for test output
    -q, --queue         the queue on which jobs are run
    --reservation       reservation you wish to use (optional name after =)
    --route             specify a routing queue to submit to (dav)
    -s, --seed          specify the seed used to pair nodes
EOF
exit $1
}

# Set default values
MACHINE=cheyenne
ACCOUNT=SCSG0001
CASE=unknown
NUMNODES=-1
TESTPATH=/glade/scratch/$USER/nodetests
QUEUE=regular
SEED=$(cat /dev/urandom | tr -dc 'A-Z0-9' | fold -w 8 | head -n 1)
NTPATH=$(cd $(dirname ${BASH_SOURCE[0]})/../ >/dev/null && pwd -P)

while [[ $# -gt 0 ]]; do
    KEY="$1"

    case $KEY in
        -h|--help)
            usage
            ;;
        -a|--account)
            ACCOUNT="$2"
            shift; ;;
        -f|--force)
            FORCE=TRUE
            ;;
        -m|--machine)
            MACHINE="${2,,}"
            shift; ;;
        -n|--nodes)
            NUMNODES="$2"
            shift; ;;
        -o|--options)
            SCHEDOPTS="$2"
            shift; ;;
        -p|--path)
            TESTPATH="$2"
            shift; ;;
        -q|--queue)
            QUEUE="$2"
            shift; ;;
        --reservation*)
            RESMODE=TRUE

            if [[ $1 == *=* ]]; then
                RESNAME=${1##*=}
            fi
            ;;
        --route)
            RQUEUE="$2"
            shift; ;;
        -s|--seed)
            SEED="$2"
            shift; ;;
        *)
            CASE=$KEY
            ;;
    esac

    shift
done

cd $NTPATH

# Make sure that the case exists
if [[ ! -d cases/$CASE ]]; then
    echo -e "Fatal: case $CASE not found; cannot start test\n"
    usage 3
else
    source cases/${CASE}/config
fi

# Make sure that the machine is supported
if [[ ! -f machines/${MACHINE}.cfg ]]; then
    echo -e "Fatal: machine $MACHINE it not supported; cannot start test\n"
    usage 4
else
    source machines/${MACHINE}.cfg
fi

# ===== BEGIN LOGGING

TESTPATH=${TESTPATH}/${CASE}/$(date +%FT%H%M%S)
LOGFILE=${TESTPATH}/main.log
mkdir -p ${TESTPATH}/runs

cat << EOF

===========================
    Starting Nodetester 
===========================

EOF

function logmsg {
    echo "$(date +%FT%T) | $1" | tee -a $LOGFILE
}

INIT=LOGGING

logmsg "Initializing new node test..."
logmsg "Using test case: $CASENAME"
logmsg "Using the $SCHEDNAME batch scheduler"

# Create randomizer function
echo "openssl enc -aes-256-ctr -pass pass:$SEED -nosalt </dev/zero 2>/dev/null" > ${TESTPATH}/seedfunc
chmod +x ${TESTPATH}/seedfunc

# ===== CHECK AVAILABLE NODE COUNT

# Get available nodes in specified queue
if [[ $RESMODE == TRUE ]]; then
    if [[ $NUMNODES -eq -1 ]]; then
        NUMNODES=$(eval "$GETNODESRES")
    fi
elif [[ $FORCE = TRUE ]]; then
    if [[ $NUMNODES -eq -1 ]]; then
        NUMNODES=$(eval "$GETNODESALL")
    fi

    logmsg "Note: skipping free node check (force); long queue wait possible!"
else
    FREENODES=$(eval "$GETNODES")
    
    if [[ $FREENODES -eq 0 ]]; then
        logmsg "Fatal: no free nodes available in $QUEUE queue"
        exit 1
    elif [[ $FREENODES -lt $NUMNODES ]]; then
        logmsg "Warning: requested $NUMNODES nodes but only $FREENODES available in $QUEUE queue"
        NUMNODES=$FREENODES
    elif [[ $NUMNODES -eq -1 ]]; then
        NUMNODES=$FREENODES
    fi
fi

logmsg "Using $NUMNODES nodes in the $QUEUE queue"
JOBSETTINGS=${JOBSETTINGS/NUMNODES/$NUMNODES}

if [[ $RESMODE == TRUE ]]; then
    logmsg "Using scheduler reservation $RESNAME"

    if [[ -n $RESNAME ]]; then
        JOBSETTINGS="$JOBSETTINGS ${RESFLAG/RESNAME/$RESNAME}"
        QUEUE="$QUEUE (reservation $RESNAME)"
    else
        QUEUE="$QUEUE (reservation)"
    fi
fi

logmsg "Seeding nodes using random code: $SEED"
LEFTOVER=$((NUMNODES % NPR))

if [[ $LEFTOVER -gt 0 ]]; then
    LEFTOVER=1
    logmsg "Note: leftover nodes to allocate; an extra test will be performed"
fi

# ===== SUBMIT JOB

logmsg "Running case $CASE in $TESTPATH"
cp cases/driver.${MACHINE} cases/${CASE}/launch ${TESTPATH}

# Clone case directory
logmsg "Creating and populating run directories..."

NUMRUNS=$((NUMNODES / NPR + LEFTOVER))
for N in $(seq 1 $NUMRUNS); do
    mkdir -p ${TESTPATH}/runs/R$N
    ln -s ${NTPATH}/cases/${CASE}/case_${MACHINE}/* ${TESTPATH}/runs/R$N
done

logmsg "Configuring job environment..."

# Store variables for ingest into job environment
cat > ${TESTPATH}/my.env << EOF
source ${NTPATH}/cases/${CASE}/config
source ${NTPATH}/machines/${MACHINE}.cfg
export LOGFILE=$LOGFILE
export TESTPATH=$TESTPATH
export NUMRUNS=$NUMRUNS
EOF

logmsg "Submitting job with the following settings:"
logmsg "   $JOBSETTINGS $SCHEDOPTS"

cd $TESTPATH
echo -e "\n# Submit command: $SUBCMD -o driver.log $JOBSETTINGS $SCHEDOPTS driver.${MACHINE}" >> driver.$MACHINE
JOBID=$(eval "$SUBCMD -o job.log $JOBSETTINGS $SCHEDOPTS driver.${MACHINE}")
JOBID=${JOBID##* }
STATCMD=${STATCMD/JOBID/$JOBID}

echo -n "Queued" > my.status
touch map pass fail
ELAPSED=0
SECONDS=0

# ===== MONITOR RUNS

LOGSIZE=$(($(tput lines) - 21))

function ttylog {
clear
cat << EOF
$(date +%FT%T)

Test Case:          $CASENAME
Job ID:             $JOBID
Node Order Seed:    $SEED
Elapsed Time:       $TELAP
Execution Queue:    $QUEUE
Job Directory:      $TESTPATH

Job Status:         $JOBSTAT
Tests Running:      $NUMACTIVE

Completed:          ${NUMDONE:-0} / $NUMRUNS
Successful:         ${NUMPASS:-0} / $NUMRUNS
Failed:             ${NUMFAIL:-0} / $NUMRUNS

====================
Recent log messages:
====================

EOF

tail -n $LOGSIZE $LOGFILE
}

INIT=JOB

while [[ $JOBSTAT != "Finished" ]]; do
    # Check for job loss
    if [[ $SECONDS -ge 30 ]]; then
        let ELAPSED+=SECONDS
        SECONDS=0

        if [[ $(eval "$STATCMD")z == z ]]; then
            logmsg "Fatal: $SCHEDNAME reports that the job is no longer active"
            exit 6
        fi
    fi

    # Write logs
    sleep 5
    JOBSTAT=$(cat my.status)
    NUMACTIVE=$(wc -l < my.active 2> /dev/null)
    NUMDONE=$(wc -l < my.done 2> /dev/null)
    NUMPASS=$(wc -l < pass 2> /dev/null)
    NUMFAIL=$(wc -l < fail 2> /dev/null)
    TELAP=$(TZ=UTC0 printf '%(%M min %S sec)T\n' $((ELAPSED+SECONDS)))

    ttylog
done

# ===== OUTPUT FINAL REPORT

cat >> $LOGFILE << EOF

====================
 Node test summary 
====================

Test Case:          $CASENAME
Batch System:       $SCHEDNAME
Job ID:             $JOBID
Execution Queue:    $QUEUE
Node Order Seed:    $SEED
Elapsed Time:       $TELAP

Number of Runs:     $NUMRUNS
Successful Runs:    $NUMPASS
Failed Runs:        $NUMFAIL

EOF

clear
tail -n $((15 + REPLEN)) $LOGFILE

# Print list of nodes with failures to give to admins
if [[ -s ${TESTPATH}/fail ]]; then
    echo
    logmsg "Failures on nodes:"
    logmsg $(awk '{print $2}' ${TESTPATH}/fail | paste -s -d,)
fi

#rm -f ${TESTPATH}/my.*
echo -e "\nResults stored in $TESTPATH"
